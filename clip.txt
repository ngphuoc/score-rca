#-- from main-rca.jl
function get_score(dnet, x)
    sz = size(x)
    @≥ x vec transpose
    t = fill!(similar(x, size(x)[end]), 0.01) .* (1f0 - 1f-5) .+ 1f-5  # same t for j and paj
    # σ_t = expand_dims(marginal_prob_std(t; args.σ_max), 1)
    @> dnet(x, t) reshape(sz)
end

dx = @> get_score.([dnet], transpose.(eachrow(x))) vcats


df = DataFrame(n_nodes0=Int[],
               n_nodes=Int[],
               n=Int[],
               e = Int[],
               shapley_node = Float64[],
               shapley_edge = Float64[],
               sampling_node = Float64[],
               sampling_edge = Float64[],
               permutation_node = Float64[],
               permutation_edge = Float64[],
               naive_node = Float64[],
               naive_edge = Float64[],
               grad_node = Float64[],
               grad_edge = Float64[],
               k = Int[],
               μ0 = Float64[],
               μ1 = Float64[])

#-- from main-circa.jl

function get_residual(bn, x)
    μx = forward_1step(bn, x)

    t = fill!(similar(x, size(x)[end]), 0.01) .* (1f0 - 1f-5) .+ 1f-5  # same t for j and paj
    @> dnet(x, t)

end

get_scores(dnet, x) = @> get_residual.([dnet], transpose.(eachrow(x))) vcats

dz = get_residual(dnet, z)
dx = get_scores(dnet, x)

vx = abs.(dx)  # anomaly_measure

